function resetMetrics() {
    // Speed metriğini sıfırla
    const speedMetric = document.querySelector('#metricsContainer > div:first-child');
    if (speedMetric) {
        const speedCircle = speedMetric.querySelector('circle.progress');
        const speedValue = speedMetric.querySelector('.text-lg');
        
        if (speedCircle && speedValue) {
            const circumference = 2 * Math.PI * 36;
            speedCircle.style.strokeDashoffset = circumference; // Tam daire = boş
            speedValue.textContent = '0';
        }
    }

    // AccelPct metriğini sıfırla
    const accelMetric = document.querySelector('#metricsContainer > div:nth-child(2)');
    if (accelMetric) {
        const accelCircle = accelMetric.querySelector('circle.progress');
        const accelValue = accelMetric.querySelector('.text-lg');
        
        if (accelCircle && accelValue) {
            const circumference = 2 * Math.PI * 36;
            accelCircle.style.strokeDashoffset = circumference; // Tam daire = boş
            accelValue.textContent = '0';
        }
        const motorRPMMetric = document.querySelector('#metricsContainer > div:nth-child(3)');
        if (motorRPMMetric) {
            const motorRPMValue = motorRPMMetric.querySelector('.text-lg');
            const motorRPMCircle = motorRPMMetric.querySelector('circle.progress');
            
            if (motorRPMCircle && motorRPMValue) {
                const circumference = 2 * Math.PI * 36;
                motorRPMCircle.style.strokeDashoffset = circumference;
                motorRPMValue.textContent = '0';
            }
        }

        const socmetric = document.querySelector('#metricsContainer > div:nth-child(4)');
        if (socmetric) {
            const socvalue = socmetric.querySelector('.text-lg');
            const soccircle = socmetric.querySelector('circle.progress');
            
            if (soccircle && socvalue) {
                const circumference = 2 * Math.PI * 36;
                soccircle.style.strokeDashoffset = circumference;
                socvalue.textContent = '0';
            }

        }
    }

    // Temperature metriğini sıfırla (varsa)
    const tempMetric = document.querySelector('#metricsContainer > div:nth-child(3)');
    if (tempMetric) {
        const tempCircle = tempMetric.querySelector('circle.progress');
        const tempValue = tempMetric.querySelector('.text-lg');
        
        if (tempCircle && tempValue) {
            const circumference = 2 * Math.PI * 36;
            tempCircle.style.strokeDashoffset = circumference;
            tempValue.textContent = '0';
        }
    }

    // Battery metriğini sıfırla (varsa)
    const batteryMetric = document.querySelector('#metricsContainer > div:nth-child(4)');
    if (batteryMetric) {
        const batteryCircle = batteryMetric.querySelector('circle.progress');
        const batteryValue = batteryMetric.querySelector('.text-lg');
        
        if (batteryCircle && batteryValue) {
            const circumference = 2 * Math.PI * 36;
            batteryCircle.style.strokeDashoffset = circumference;
            batteryValue.textContent = '0';
        }
    }
}






function updateMetrics(data) {
    // Speed metriğini güncelle
    const speedMetric = document.querySelector('#metricsContainer > div:first-child');
    if (speedMetric) {
        const speedValue = speedMetric.querySelector('.text-lg');
        const speedCircle = speedMetric.querySelector('circle.progress');

        if (typeof data.speed !== 'undefined') {
            lastSpeed = data.speed; // Yeni hız verisi varsa güncelle
        }

        // Hız değerini göster
        speedValue.textContent = lastSpeed !== null ? Math.round(lastSpeed) : 'Veri Yok';

        // Dairesel gösterim hesaplamaları
        if (speedCircle) {
            const speedPercentage = (lastSpeed !== null ? lastSpeed : 0) / 180 * 100; // 180 km/h max hız
            const circumference = 2 * Math.PI * 36;
            speedCircle.style.strokeDasharray = circumference;
            const offset = circumference * (1 - speedPercentage / 100);
            speedCircle.style.strokeDashoffset = offset;
        }
    }

    // AccelPct metriğini güncelle
    const accelMetric = document.querySelector('#metricsContainer > div:nth-child(2)');
    if (accelMetric) {
        const accelValue = accelMetric.querySelector('.text-lg');
        const accelCircle = accelMetric.querySelector('circle.progress');

        if (typeof data.accelPct !== 'undefined') {
            lastAccelPct = data.accelPct; // Yeni ivme verisi varsa güncelle
        }

        // İvme değerini göster
        accelValue.textContent = lastAccelPct !== null ? Math.round(lastAccelPct) : 'Veri Yok';

        // Dairesel gösterim hesaplamaları
        if (accelCircle) {
            const accelPercentage = lastAccelPct !== null ? lastAccelPct : 0; // Zaten yüzde olarak geliyor
            const circumference = 2 * Math.PI * 36;
            accelCircle.style.strokeDasharray = circumference;
            const offset = circumference * (1 - accelPercentage / 100);
            accelCircle.style.strokeDashoffset = offset;
        }
    }
    const brakeMetric = document.querySelector('#metricsContainer > div:nth-child(3)');
    if (brakeMetric) {
        const brakeValue = brakeMetric.querySelector('.text-lg');
        const brakeCircle = brakeMetric.querySelector('circle.progress');

        if (typeof data.brakeMetric !== 'undefined') {
            lastBrakePct = data.brakeMetric; // Yeni ivme verisi varsa güncelle
        }

        // İvme değerini göster
        brakeValue.textContent = lastBrakePct !== null ? Math.round(lastBrakePct) : 'Veri Yok';

        // Dairesel gösterim hesaplamaları
        if (brakeCircle) {
            const brakePercentage = lastBrakePct !== null ? lastBrakePct : 0; // Zaten yüzde olarak geliyor
            const circumference = 2 * Math.PI * 36;
            brakeCircle.style.strokeDasharray = circumference;
            const offset = circumference * (1 - brakePercentage / 100);
            brakeCircle.style.strokeDashoffset = offset;
        }
    }


    // Motor RPM metriğini güncelle
    const motorRPMMetric = document.querySelector('#metricsContainer > div:nth-child(4)');
    if (motorRPMMetric) {
        const motorRPMValue = motorRPMMetric.querySelector('.text-lg');
        const motorRPMCircle = motorRPMMetric.querySelector('circle.progress');
        
        if (typeof data.MotorRpm !== 'undefined') {
            lastMotorRpm = data.MotorRpm; // Yeni motor RPM verisi varsa güncelle
        }

        // Motor RPM değerini göster
        motorRPMValue.textContent = lastMotorRpm !== null ? Math.round(lastMotorRpm) : 'Veri Yok';
        
        // Dairesel gösterim hesaplamaları
        if (motorRPMCircle) {
            const maxMotorRpm = 3000; // Maksimum RPM değeri
            const motorRpmValue = lastMotorRpm !== null ? lastMotorRpm : 0; // 0 ile 3000 arasında bir değer
            const circumference = 2 * Math.PI * 36;
            motorRPMCircle.style.strokeDasharray = circumference;
            const offset = circumference * (1 - (motorRpmValue / maxMotorRpm));
            motorRPMCircle.style.strokeDashoffset = offset;
        }
    }

    // Batarya yüzdesi metriğini güncelle
    const socMetric = document.querySelector('#metricsContainer > div:nth-child(5)');
    if (socMetric) {
        const socValue = socMetric.querySelector('.text-lg');
        const socCircle = socMetric.querySelector('circle.progress');

        if (typeof data.SOC !== 'undefined') {
            lastSoc = data.SOC; // Yeni batarya yüzdesi varsa güncelle
        }

        // Batarya yüzdesini göster
        socValue.textContent = lastSoc !== null ? Math.round(lastSoc) : 'Veri Yok';

        // Dairesel gösterim hesaplamaları
        if (socCircle) {
            const socPercentage = (lastSoc !== null ? lastSoc : 0) / 100 * 100; // 100% max batarya
            const circumference = 2 * Math.PI * 36;
            socCircle.style.strokeDasharray = circumference;
            const offset = circumference * (1 - socPercentage / 100);
            socCircle.style.strokeDashoffset = offset;
        }
    }
}